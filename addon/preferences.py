import os

import bpy

from bpy.types import AddonPreferences, Operator
from bpy.props import EnumProperty, FloatVectorProperty, BoolProperty, IntProperty, FloatProperty, PointerProperty

from . import properties
from .config import defaults as default

class preferences(AddonPreferences):

  bl_idname = __name__.partition('.')[0]

  mode = EnumProperty(
    name = 'Display Mode',
    description = 'What objects to display bounds around.',
    items = [
      ('NONE', 'None', 'Disable selection bounds.'),
      ('SELECTED', 'Selected Objects', 'The selected objects.'),
      ('ACTIVE', 'Active Object', 'The active object.'),
    ],
    default = default['mode']
  )

  color = FloatVectorProperty(
    name = 'Color',
    description = 'Color of the bounds.',
    subtype = 'COLOR',
    size = 4,
    min = 0.0,
    max = 1.0,
    default = default['color']
  )

  use_object_color = BoolProperty(
    name = 'Use Object Color',
    description = 'Use the object\'s color.',
    default = default['use_object_color']
  )

  width = IntProperty(
    name = 'Width',
    description = 'Width of the lines in pixels.',
    min = 1,
    max = 10,
    default = default['width']
  )

  length = FloatProperty(
    name = 'Length',
    description = 'Length of the lines as they extend from the cornders.',
    min = 0.1,
    max = 1.0,
    default = default['length']
  )

  def draw(self, context):

    layout = self.layout

    column = layout.column()
    column.enabled = not context.scene.selection_bounds.running
    column.scale_y = 2

    text = 'Enable' if not context.scene.selection_bounds.running else 'Running'
    column.operator('view3d.selection_bounds', text=text)

    column = layout.column()

    box = layout.box()

    column = box.column()

    row = column.row(align=True)

    row.prop(self, 'mode')

    sub = row.row(align=True)
    sub.scale_x = 0.5
    sub.prop(self, 'color', text='')

    subsub = sub.row(align=True)
    subsub.scale_x = 2
    subsub.prop(self, 'use_object_color', text='', icon='OBJECT_DATA')

    row = box.row()

    row.prop(self, 'width')
    row.prop(self, 'length', slider=True)

    row = box.row()
    row.alignment = 'RIGHT'
    row.scale_y = 1.5

    row.operator('wm.save_selection_bound_defaults')


class save(Operator):
  bl_idname = 'wm.save_selection_bound_defaults'
  bl_label = 'Save'
  bl_description = 'Permenently store the current settings as the default values.'
  bl_options = {'INTERNAL'}


  def execute(self, context):

    preference = context.user_preferences.addons[__name__.partition('.')[0]].preferences

    defaults = {
      'mode': preference.mode,
      'color': tuple(preference.color),
      'use_object_color': preference.use_object_color,
      'width': preference.width,
      'length': preference.length
    }

    filepath = os.path.abspath(os.path.join(os.path.dirname(__file__), 'config.py'))

    with open(filepath, '+r') as config:
      config.truncate()
      config.write('# Generated by preferences.save\ndefaults = {}'.format(str(defaults)))

    return {'FINISHED'}
